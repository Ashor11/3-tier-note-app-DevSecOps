---
# Enhanced Ansible playbook for Azure DevOps agent setup
- name: Setup Azure DevOps Dependencies
  hosts: localhost
  become: yes
  vars:
    python_version: "python3.9"
    java_version: "java-17-openjdk-devel"
    docker_compose_version: "1.29.2"
    docker_user: "{{ ansible_user }}"  # Uses the current Ansible user
  tasks:
    # Base system setup
    - name: Install common dependencies
      yum:
        name:
          - curl
          - wget
          - unzip
          - git
          - gcc
          - make
          - openssl-devel
          - bzip2-devel
          - libffi-devel
          - zlib-devel
        state: present
      when: ansible_os_family == "RedHat"

    # Python setup
    - name: Install Python
      yum:
        name: "{{ python_version }}"
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install pip
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'

    - name: Run pip installer
      command: "{{ python_version }} /tmp/get-pip.py"
      args:
        creates: /usr/bin/pip3

    - name: Install Python packages
      pip:
        name:
          - flask
          - pytest
          - flake8
          - pytest-cov
          - psycopg2-binary
          - ansible
          - docker
          - pywinrm
        executable: pip3
        extra_args: --ignore-installed

    # Java setup
    - name: Install Java
      shell: |
        sudo yum install -y java-17-openjdk-devel
        sudo alternatives --set java /usr/lib/jvm/java-17-openjdk/bin/java
        sudo mkdir -p /usr/java
        sudo ln -sf /usr/lib/jvm/java-17-openjdk /usr/java/default
      args:
        executable: /bin/bash

    - name: Set JAVA_HOME globally
      shell: |
        echo "export JAVA_HOME=/usr/java/default" | sudo tee /etc/profile.d/java.sh
        echo "export PATH=\$JAVA_HOME/bin:\$PATH" | sudo tee -a /etc/profile.d/java.sh
        sudo chmod +x /etc/profile.d/java.sh
        source /etc/profile.d/java.sh
      args:
        executable: /bin/bash

    - name: Create global symlinks
      shell: |
        sudo ln -sf /usr/java/default/bin/java /usr/bin/java
        sudo ln -sf /usr/java/default/bin/javac /usr/bin/javac
      args:
        executable: /bin/bash

    - name: Verify Java installation
      shell: |
        which java
        java -version
      args:
        executable: /bin/bash
      register: java_version_output
      changed_when: false

    - name: Display Java version
      debug:
        msg: "{{ java_version_output.stderr }}"

    # Docker installation
    - name: Remove podman-docker if installed
      shell: sudo dnf remove -y podman-docker
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Install Docker
      shell: |
        sudo dnf -y install dnf-plugins-core
        sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        sudo dnf install -y --allowerasing docker-ce docker-ce-cli containerd.io
        sudo groupadd -f docker
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $(whoami)
        sudo ln -sf /var/run/docker.sock /var/run/docker.sock
        sudo chmod 666 /var/run/docker.sock
      args:
        executable: /bin/bash
      ignore_errors: yes

    # Verify Docker installation
    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # Test Docker functionality
    - name: Test Docker with hello-world
      command: docker run hello-world
      register: hello_test
      ignore_errors: yes

    - name: Show Docker test results
      debug:
        msg: "{{ hello_test.stdout }}"
      when: hello_test is not failed
   

    # Helm setup
    - name: Install Helm
      get_url:
        url: https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
        dest: /tmp/helm.tar.gz

    - name: Extract Helm
      unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Install Helm binary
      copy:
        src: "/tmp/linux-amd64/helm"
        dest: "/usr/local/bin/helm"
        mode: '0755'
        remote_src: yes

    # kubectl setup
    - name: Install kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.22.4/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'

    # AWS CLI setup
    - name: Install AWS CLI
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Run AWS CLI installer
      command: /tmp/aws/install --update
      args:
        creates: /usr/local/bin/aws

    # Final system configuration
    - name: Update PATH
      lineinfile:
        path: /etc/environment
        regexp: '^PATH='
        line: 'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"'
        state: present

    - name: Reload environment
      shell: source /etc/environment
      args:
        executable: /bin/bash