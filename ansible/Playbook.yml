---
# Enhanced Ansible playbook for Azure DevOps agent setup
- name: Setup Azure DevOps Dependencies
  hosts: all
  become: yes
  vars:
    python_version: "python3.9"
    java_version: "java-17-openjdk-devel"
    docker_compose_version: "1.29.2"
    docker_user: "{{ ansible_user }}"  # Uses the current Ansible user
  tasks:
    # Base system setup
    - name: Install common dependencies
      yum:
        name:
          - curl
          - wget
          - unzip
          - git
          - gcc
          - make
          - openssl-devel
          - bzip2-devel
          - libffi-devel
          - zlib-devel
        state: present
      when: ansible_os_family == "RedHat"

    # Python setup
    - name: Install Python
      yum:
        name: "{{ python_version }}"
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install pip
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
        mode: '0755'

    - name: Run pip installer
      command: "{{ python_version }} /tmp/get-pip.py"
      args:
        creates: /usr/bin/pip3

    - name: Install Python packages
      pip:
        name:
          - flask
          - pytest
          - flake8
          - pytest-cov
          - psycopg2-binary
          - ansible
          - docker
          - pywinrm
        executable: pip3

    # Java setup
    - name: Install Java
      yum:
        name: "{{ java_version }}"
        state: present
      when: ansible_os_family == "RedHat"

    - name: Set JAVA_HOME
      lineinfile:
        path: /etc/environment
        line: 'JAVA_HOME=/usr/lib/jvm/{{ java_version | replace("-devel", "") }}'
        state: present

    # 1. Install prerequisites
    - name: Install required packages
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install yum-utils (RHEL/CentOS)
      package:
        name: yum-utils
        state: present
      when: ansible_os_family == 'RedHat'

    # 2. Add Docker GPG key
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        state: present
      when: ansible_os_family == 'Debian'

    # 3. Add Docker repository
    - name: Add Docker repository (Debian/Ubuntu)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker-ce
      when: ansible_os_family == 'Debian'

    - name: Add Docker repository (RHEL/CentOS)
      yum_repository:
        name: docker-ce
        description: Docker CE Stable
        baseurl: https://download.docker.com/linux/centos/$releasever/$basearch/stable
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes
      when: ansible_os_family == 'RedHat'

    # 4. Install Docker
    - name: Install Docker packages
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    # 5. Start and enable Docker service
    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: yes

    # 6. Add user to docker group
    - name: Add user to docker group
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes

    # 7. Update PATH if needed
    - name: Ensure Docker is in PATH
      lineinfile:
        path: /etc/environment
        regexp: '^PATH='
        line: 'PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin/docker"'
        state: present

    # 8. Verify installation
    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # 9. Test Docker functionality
    - name: Test Docker with hello-world
      command: docker run hello-world
      register: hello_test
      ignore_errors: yes

    - name: Show Docker test results
      debug:
        msg: "{{ hello_test.stdout }}"
      when: hello_test is not failed
   

    # Helm setup
    - name: Install Helm
      get_url:
        url: https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
        dest: /tmp/helm.tar.gz

    - name: Extract Helm
      unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Install Helm binary
      copy:
        src: "/tmp/linux-amd64/helm"
        dest: "/usr/local/bin/helm"
        mode: '0755'
        remote_src: yes

    # kubectl setup
    - name: Install kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.22.4/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'

    # AWS CLI setup
    - name: Install AWS CLI
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Run AWS CLI installer
      command: /tmp/aws/install --update
      args:
        creates: /usr/local/bin/aws

    # JFrog CLI setup
    - name: Install JFrog CLI
      get_url:
        url: https://releases.jfrog.io/artifactory/jfrog-cli/v2/install.sh
        dest: /tmp/install-jfrog-cli.sh
        mode: '0755'

    - name: Run JFrog CLI installer
      command: /tmp/install-jfrog-cli.sh
      args:
        creates: /usr/local/bin/jfrog

    # Azure CLI setup (optional)
    - name: Install Azure CLI
      shell: |
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
        echo -e "[azure-cli]
        name=Azure CLI
        baseurl=https://packages.microsoft.com/yumrepos/azure-cli
        enabled=1
        gpgcheck=1
        gpgkey=https://packages.microsoft.com/keys/microsoft.asc" | tee /etc/yum.repos.d/azure-cli.repo
        yum install -y azure-cli
      args:
        executable: /bin/bash
        creates: /usr/bin/az

    # Node.js setup (optional)
    - name: Install Node.js
      shell: |
        curl -sL https://rpm.nodesource.com/setup_14.x | bash -
        yum install -y nodejs
      args:
        executable: /bin/bash
        creates: /usr/bin/node

    # Final system configuration
    - name: Update PATH
      lineinfile:
        path: /etc/environment
        regexp: '^PATH='
        line: 'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"'
        state: present

    - name: Reload environment
      shell: source /etc/environment
      args:
        executable: /bin/bash