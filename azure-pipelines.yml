trigger:
  branches:
    include:
      - main
pool:
  name: Default
variables:
  - group: docker_vars
  - group: jfrog-helm-repo
  - name: imageName
    value: feedback-app
  - name: imageTag
    value: $(Build.BuildId)
  
parameters:
  - name: environment
    displayName: environment
    type: string
    default: dev
    values:
      - dev
stages:
- stage: CI
  displayName: CI stage
  jobs:
  - job: test
    steps:
    - checkout: self
    - script: |
       sudo yum install python3.9 -y
      displayName: 'Install Python 3.9'
    - script: |
        sudo yum install python3-pip -y
        sudo python -m pip install --upgrade pip
        sudo pip install flask pytest flake8
        sudo pip install pytest
      displayName: 'Install Flask and linting tools'
    - script: flake8 src/feedback_backend/app.py
      displayName: Linting Backend
    - script: |
        sudo pip install -r src/feedback_backend/requirements.txt
        python3 -m pytest tests/test_app.py
      displayName: 'Run Backend Tests'
  - job: sonarqube
    dependsOn: test
    timeoutInMinutes: 20
    steps:
    - checkout: self
      fetchDepth: 0
    - script: |
        sudo amazon-linux-extras enable java-openjdk17 || true
        sudo yum install -y java-17-amazon-corretto
        export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
        echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME"
        echo "JAVA_HOME set to $JAVA_HOME"
        java -version
      displayName: 'Install Java 17'
    - task: SonarCloudPrepare@3
      displayName: 'Configure SonarCloud Analysis'
      inputs:
        SonarQube: 'sonarservice'
        organization: 'ashouryasser11'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'ashouryasser11_feedback-app'
        cliProjectName: 'feedback-app'
        extraProperties: |
          sonar.sources=.
          sonar.python.coverage.reportPaths=coverage.xml
          sonar.exclusions=**/tests/**, **/build/**, **/*.min.js, **/*.min.css
          sonar.python.version=3.9
    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'
    - task: SonarCloudPublish@3
      displayName: 'Publish Quality Gate Results'
  - job: docker
    dependsOn: sonarqube
    displayName: docker build
    steps:
    - checkout: self
    - script: |
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        sudo yum install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo chmod 666 /var/run/docker.sock
      displayName: 'Install Docker'
    - script: |
         sudo yum install -y docker
         sudo systemctl start docker
         sudo usermod -aG docker $(whoami)
      displayName: 'Install Docker'
    - task: Docker@2
      condition: succeeded()
      displayName: 'Build frontend image'
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: '$(DOCKER_USERNAME)/$(imageName)-frontend'
        command: 'buildAndPush'
        buildContext: '$(System.DefaultWorkingDirectory)'
        Dockerfile: 'src/feedback_frontend/src/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: 'Build backend image'
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: '$(DOCKER_USERNAME)/$(imageName)-backend'
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_backend/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(Build.BuildId)

  - job: helm
    dependsOn: docker
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'replace image tags in helm chart'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        targetType: 'inline'
        script: |
          sed -i "s|{DOCKER_USERNAME}-frontend|$(DOCKER_USERNAME)/$(imageName)-frontend:$(Build.BuildId)|g" note-chart/values.yaml
          sed -i "s|{DOCKER_USERNAME}-backend|$(DOCKER_USERNAME)/$(imageName)-backend:$(Build.BuildId)|g" note-chart/values.yaml
          echo "Updated values.yaml:"
          grep -A 1 "image:" note-chart/values.yaml

    - task: Bash@3
      displayName: 'build helm chart'
      inputs:
        targetType: 'inline'
        script: |
          helm package note-chart --version 0.1.$(Build.BuildId) --app-version 1.0.$(Build.BuildId)
          curl -u "$(helm_repo_user):$(helm_repo_token)" -X PUT \
               -T note-chart-0.1.$(Build.BuildId).tgz \
               "$(repository)/note-chart-0.1.$(Build.BuildId).tgz"
    - task: Bash@3
      displayName: 'helm repo index'
      inputs:
        targetType: 'inline'
        script: |
          helm repo add my_repo $(repository) --username $(helm_repo_user) --password $(helm_repo_token)
          helm repo update
    - task: Bash@3
      displayName: 'Check Helm Chart Version'
      inputs:
        targetType: 'inline'
        script: |
          echo "Running Helm template..."
          CHART_NAME="my_repo/note-chart"        
          EXPECTED_VERSION="0.1.$(Build.BuildId)"
          echo "Expected version: $EXPECTED_VERSION"
          SEARCH_RESULT=$(helm search repo $CHART_NAME --version $EXPECTED_VERSION)

          if echo "$SEARCH_RESULT" | grep -q "$EXPECTED_VERSION"; then
             echo "Chart version $EXPECTED_VERSION exists"
          else
            echo "Chart version $EXPECTED_VERSION does NOT exist"
            exit 1
          fi

- stage: CD
  displayName: CD stage
  jobs:
  - deployment: deployToDev
    displayName: Deploy to ${{ parameters.environment }} EKS
    environment: '${{ parameters.environment }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
         # - task: ReplaceTokens@6
          ## inputs:
             # rootDirectory: '$(System.DefaultWorkingDirectory)'        
             # targetFiles: 'k8s/*.yaml'
             # tokenPrefix: '${'
             # tokenSuffix: '}'
             # escapeType: 'json'
             # verbosity: 'detailed'
          - task: AWSShellScript@1
            displayName: 'Update kubeconfig'
            inputs:
              awsCredentials: 'aws-credentials'
              regionName: 'us-east-1'
              scriptType: 'inline'
              inlineScript: |
                 aws eks update-kubeconfig --name my-eks-cluster --region us-east-1 
  
          - task: Bash@3
            displayName: 'helm install'
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                helm install note-chart-$(Build.BuildId) note-chart/my_repo --version 0.1.$(Build.BuildId)